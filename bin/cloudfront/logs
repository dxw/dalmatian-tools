#!/bin/bash

# exit on failures
set -e
set -o pipefail

. "${APP_ROOT}/lib/colors.sh"

usage() {
  echo "Usage: dalmatian cloudfront $(basename "$0") -i <infrastructure> -s <service> -e <environment> [options]" 1>&2
  echo "  -h                     Get help with this command"
  echo "  -i <infrastructure>    Name of the infrastructure you want to target"
  echo "  -s <service>           Name of the service you want to target"
  echo "  -e <environment>       Name of the environment (e.g. 'staging' or 'prod')"
  echo
  echo "Options:"
  echo "  -p <pattern>           Glob pattern to match against (e.g. '2020-11-13')"
  echo "  -d <directory>         Local directory to download logs to (e.g /home/user/logs/)"
  exit 1
}

# if there are no arguments passed exit with usage
if [ $# -eq 0 ]
then
  fatal "Please specify an infrastructure, environment and service name"
  echo
  usage
  exit 0
fi

while getopts "i:e:s:p:d:h" opt; do
  case $opt in
    i)
      INFRASTRUCTURE_NAME=$OPTARG
      ;;
    e)
      ENVIRONMENT=$OPTARG
      ;;
    s)
      SERVICE_NAME=$OPTARG
      ;;
    p)
      PATTERN=$OPTARG
      ;;
    d)
      DIRECTORY=$OPTARG
      ;;
    h)
      usage
      exit;;
    *)
      usage
      exit;;
  esac
done

if [[
  -z "$INFRASTRUCTURE_NAME"
  || -z "$ENVIRONMENT"
  || -z "$SERVICE_NAME"
]]
then
  fatal "Please specify an infrastructure, environment and service name"
  echo
  usage
  exit 0
fi

if [[ -z "$DIRECTORY" ]]
then
  DIRECTORY=/tmp/$INFRASTRUCTURE_NAME-$SERVICE_NAME-$ENVIRONMENT-cloudfront-logs
fi

mkdir -p "$DIRECTORY"
success "Destination path: $DIRECTORY"

echo "Downloading log files..."

if [[ -z "$PATTERN" ]]
then
  aws s3 sync s3://"${INFRASTRUCTURE_NAME}"-"${SERVICE_NAME}"-"${ENVIRONMENT}"-cloudfront-logs/ "$DIRECTORY"
else
  aws s3 sync s3://"${INFRASTRUCTURE_NAME}"-"${SERVICE_NAME}"-"${ENVIRONMENT}"-cloudfront-logs/ "$DIRECTORY" --exclude "*" --include "*${PATTERN}*"
fi

echo
success "Finished"
