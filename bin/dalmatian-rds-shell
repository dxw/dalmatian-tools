#!/bin/bash

# exit on failures
set -e
set -o pipefail

usage() {
  echo "Usage: $(basename "$0") [OPTIONS]" 1>&2
  echo "  -h                     - help"
  echo "  -i <infrastructure>    - infrastructure name"
  echo "  -r <rds_name>          - RDS name (as defined in the Dalmatian config)"
  echo "  -e <environment>       - environment name (e.g. 'staging' or 'prod')"
  echo "  -p <profile>           - AWS profile with MFA enabled (defaults to"
  echo "                           'dalmatian-admin')"
  exit 1
}

# if there are no arguments passed exit with usage
if [ $# -lt 1 ];
then
 usage
fi

SCRIPT_PATH="$( cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"

AWS_PROFILE=dalmatian-admin

while getopts "i:e:r:p:h" opt; do
  case $opt in
    i)
      INFRASTRUCTURE_NAME=$OPTARG
      ;;
    e)
      ENVIRONMENT=$OPTARG
      ;;
    r)
      RDS_NAME=$OPTARG
      ;;
    p)
      AWS_PROFILE=$OPTARG
      ;;
    h)
      usage
      ;;
    *)
      usage
      ;;
  esac
done

if [[
  -z "$INFRASTRUCTURE_NAME"
  || -z "$RDS_NAME"
  || -z "$ENVIRONMENT"
]]; then
  usage
fi

# Remove dashes from the variables to create the RDS identifier, because dashes
# aren't allowed in RDS identifiers. Dalmatian removes them on deployment, so we
# need to remove them here to get the correct identifier.
RDS_IDENTIFIER="${INFRASTRUCTURE_NAME//-/}${RDS_NAME//-/}${ENVIRONMENT//-/}"

echo "==> Assuming role to provide access to $INFRASTRUCTURE_NAME infrastructure account ..."

eval "$("$SCRIPT_PATH/dalmatian-assume-infrastructure-role" -i "$INFRASTRUCTURE_NAME" -p "$AWS_PROFILE")"

# Check that eval set AWS_SESSION_TOKEN if not exit and provide some clues as to why not
if [[ -z $AWS_SESSION_TOKEN ]]
then
  echo "AWS_SESSION_TOKEN not set by $SCRIPT_PATH/dalmatian-assume-infrastructure-role -i $INFRASTRUCTURE_NAME -p $AWS_PROFILE."
  echo "Have you run dalmatian-mfa recently?"
  echo "Can you clone git@github.com:dxw/dalmatian-config?"
  exit 1
fi

echo "==> Retrieving RDS root password from Parameter Store..."

RDS_ROOT_PASSWORD_PARAMETER=$(
  aws ssm get-parameters \
    --names "/$INFRASTRUCTURE_NAME/$RDS_IDENTIFIER-rds/password" \
    --with-decryption
)
RDS_ROOT_PASSWORD=$(
  echo "$RDS_ROOT_PASSWORD_PARAMETER" \
    | jq -r .Parameters[0].Value
)

echo "==> Getting RDS info..."

RDS_INFO=$(
  aws rds describe-db-instances \
    --db-instance-identifier "$RDS_IDENTIFIER"
)
RDS_ENGINE=$(echo "$RDS_INFO" | jq -r .DBInstances[0].Engine)
RDS_ROOT_USERNAME=$(echo "$RDS_INFO" | jq -r .DBInstances[0].MasterUsername)
RDS_VPC=$(echo "$RDS_INFO" | jq -r .DBInstances[0].DBSubnetGroup.VpcId)

echo "Engine: $RDS_ENGINE"
echo "Root username: $RDS_ROOT_USERNAME"
echo "VPC ID: $RDS_VPC"

echo "==> Finding ECS instance..."

ECS_INSTANCES=$(
  aws ec2 describe-instances \
    --filters "Name=vpc-id,Values=$RDS_VPC"
)
ECS_INSTANCE_ID=$(
  echo "$ECS_INSTANCES" \
    | jq -r .Reservations[0].Instances[0].InstanceId
)

echo "ECS instance ID: $ECS_INSTANCE_ID"

echo "==> Starting $RDS_ENGINE session on $RDS_IDENTIFIER..."

aws ssm start-session \
  --target "$ECS_INSTANCE_ID" \
  --document-name "$RDS_IDENTIFIER-rds-shell" \
  --parameters "RootPassword=$RDS_ROOT_PASSWORD"
