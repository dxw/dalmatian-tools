#!/bin/bash

# Requires the `session-manager-plugin` to be installed:
# https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html

# exit on failures
set -e
set -o pipefail

usage() {
  echo "Usage: $(basename "$0") [OPTIONS]" 1>&2
  echo "  -h                     - help"
  echo "  -i <infrastructure>    - infrastructure name"
  echo "  -e <environment>       - environment name (e.g. 'staging' or 'prod')"
  echo "  -l                     - list available ec2 instance ids (optional)"
  echo "  -I <instance_id>       - ec2 instance id (optional)"
  exit 1
}

# if there are no arguments passed exit with usage
if [ $# -eq 0 ]
then
 usage
fi

if ! command -v session-manager-plugin > /dev/null
then
  echo "This script requires the \`session-manager-plugin\` to be installed:"
  echo "https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html"
  echo "Also, If you are running an Mac M1 or above, you'll need to install Rosetta 2 by running:"
  echo "softwareupdate --install-rosetta"
  exit 1
fi

while getopts "i:e:I:lh" opt; do
  case $opt in
    i)
      INFRASTRUCTURE_NAME=$OPTARG
      ;;
    e)
      ENVIRONMENT=$OPTARG
      ;;
    l)
      LIST=1
      ;;
    I)
      INSTANCE_ID=$OPTARG
      ;;
    h)
      usage
      ;;
    *)
      usage
      ;;
  esac
done

if [[
  -z "$INFRASTRUCTURE_NAME"
  || -z "$ENVIRONMENT"
]]
then
  usage
fi

echo "==> Finding ECS instance..."
INSTANCES=$(aws ec2 describe-instances --filters Name=instance-state-code,Values=16 Name=tag:Name,Values="$INFRASTRUCTURE_NAME-$ENVIRONMENT*")

AVAILABLE_INSTANCES=$(echo "$INSTANCES" | jq -r '.Reservations[].Instances[] | (.InstanceId) + " | " + (.Tags[] | select(.Key == "Name") | .Value) + " | " + (.LaunchTime)')
if [ -n "$LIST" ];
then
  echo "$AVAILABLE_INSTANCES"
  exit 0
fi

if [ -z "$INSTANCE_ID" ];
then
  # If an instance ID isn't specified, just connect to the first one
  INSTANCE_ID=$(echo "$INSTANCES" | jq -r '.Reservations[0].Instances[0].InstanceId' )
  INSTANCE_NAME=$(echo "$INSTANCES" | jq -r '.Reservations[0].Instances[0].Tags[] | select(.Key == "Name") | .Value')
else
  # If an instance ID is specified, ensure it exists by trying to get the name
  INSTANCE_NAME=$(echo "$INSTANCES" | jq -r --arg i "$INSTANCE_ID" '.Reservations[].Instances[] | select(.InstanceId == $i) | .Tags[] | select(.Key == "Name") | .Value')
  if [ -z "$INSTANCE_NAME" ];
  then
    err "Instance ID '$INSTANCE_ID' was not found"
    echo "Available instances:"
    echo "$AVAILABLE_INSTANCES"
    exit 1
  fi
fi

echo "==> Connecting to '$INSTANCE_NAME' (id: $INSTANCE_ID)..."

aws ssm start-session --target "$INSTANCE_ID"
