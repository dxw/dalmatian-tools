#!/bin/bash

# exit on failures
set -e
set -o pipefail

. "${APP_ROOT}/lib/colors.sh"

usage() {
  echo "Usage: dalmatian ci $(basename "$0") -i <infrastructure>" 1>&2
  echo "  -h                   Get help with this command"
  echo "  -i <infrastructure>  Name of the infrastructure you want to target"
  exit 1
}

# if there are no arguments passed exit with usage
if [ $# -eq 0 ]
then
  fatal "Please specify a target infrastructure"
  echo
  usage
  exit 0
fi

while getopts "i:h" opt; do
  case $opt in
    i)
      INFRASTRUCTURE_NAME=$OPTARG
      ;;
    h)
      usage
      ;;
    *)
      usage
      ;;
  esac
done

if [[ -z "$INFRASTRUCTURE_NAME" ]]
then
  fatal "Please specify a target infrastructure"
  echo
  usage
  exit 0
fi

PIPELINE_STATUS=$(aws codepipeline get-pipeline-state --name "ci-terraform-build-pipeline")
CODEBUILD_ID=$(echo "$PIPELINE_STATUS" | jq -r --arg build_name "Build-$INFRASTRUCTURE_NAME" '.stageStates[] | select(.stageName == "Build") | .actionStates[] | select(.actionName == $build_name) | .latestExecution.externalExecutionId')

BUILD_INFO=$(aws codebuild batch-get-builds --ids "$CODEBUILD_ID")
LOG_GROUP_NAME=$(echo "$BUILD_INFO" | jq -r '.builds[0].logs.groupName')
LOG_STREAM_NAME=$(echo "$BUILD_INFO" | jq -r '.builds[0].logs.streamName')

BUILD_STATUS=""
TIMESTAMP="0"
HAD_LOGS="0"
while [ "$BUILD_STATUS" != "Succeeded" ]
do
  LOGS=$(aws logs get-log-events --log-group-name "$LOG_GROUP_NAME" --log-stream-name "$LOG_STREAM_NAME" --start-time "$TIMESTAMP")
  echo -n "$LOGS" | jq -rj --arg t "$TIMESTAMP" '.events[].message'
  NEW_TIMESTAMP=$(echo "$LOGS" | jq -r '.events[-1].timestamp')
  if [ "$NEW_TIMESTAMP" == "null" ]
  then
    if [ "$HAD_LOGS" != "1" ]
    then
      echo "Waiting for logs ..."
    fi
  else
    HAD_LOGS="1"
    TIMESTAMP=$((NEW_TIMESTAMP + 1))
  fi
  PIPELINE_STATUS=$(aws codepipeline get-pipeline-state --name "ci-terraform-build-pipeline")
  BUILD_STATUS=$(echo "$PIPELINE_STATUS" | jq -r --arg build_name "Build-$INFRASTRUCTURE_NAME" '.stageStates[] | select(.stageName == "Build") | .actionStates[] | select(.actionName == $build_name) | .latestExecution.status')

  echo
  if [ "$BUILD_STATUS" == "Failed" ]
  then
    fatal "Build status: Failed"
  fi

  sleep 1
done

success "Build status: $BUILD_STATUS"
