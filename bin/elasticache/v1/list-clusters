#!/bin/bash

# exit on failures
set -e
set -o pipefail

usage() {
  echo "List Elasticache clusters in an infrastructure."
  echo "Usage: $(basename "$0") [OPTIONS]" 1>&2
  echo "  -h                     - help"
  echo "  -i <infrastructure>    - infrastructure name"
  echo "  -e <environment>       - (optional) environment name (e.g. 'staging' or 'prod')"
  # shellcheck disable=SC2086
  exit $1
}

# if there are no arguments passed exit with usage
if [ $# -lt 1 ]
then
  usage 1
fi

while getopts "i:c:e:avh" opt; do
  case $opt in
    i)
      INFRASTRUCTURE_NAME=$OPTARG
      ;;
    e)
      ENVIRONMENT=$OPTARG
      ;;
    h)
      usage 0
      ;;
    *)
      usage 1
      ;;
  esac
done

if [[ -z "$INFRASTRUCTURE_NAME" ]];
then
  usage 1
fi

CLUSTERS=$(aws elasticache describe-cache-clusters --show-cache-node-info)
CLUSTER_IDS=$(echo "$CLUSTERS" | jq -r '.CacheClusters[].CacheClusterId')

for CLUSTER in $CLUSTER_IDS;
do
  ARN=$(echo "$CLUSTERS" |  jq --arg "cluster_id" "$CLUSTER" -r '.CacheClusters[] | select(.CacheClusterId == $cluster_id).ARN')
  TAGS=$(aws elasticache list-tags-for-resource --resource-name "$ARN")
  ENV=$(echo "$TAGS" | jq -r '.TagList[] | select(.Key == "Environment") | .Value')
  # infra-name-environment e.g. dxw-govpress-rdscache-staging.
  NICE_NAME=$(echo "$TAGS" | jq -r '.TagList | map(select(.Key == "Infrastructure" or .Key == "Name" or .Key == "Environment") | .Value) | join("-")')
  ENGINE=$(echo "$CLUSTERS" |  jq --arg "cluster_id" "$CLUSTER" -r '.CacheClusters[] | select(.CacheClusterId == $cluster_id).Engine')
  if [[ -z $ENVIRONMENT ]] || { [[ -n "$ENVIRONMENT" ]] && [[ "$ENV" == "$ENVIRONMENT" ]]; };
  then
    echo "Name: $NICE_NAME Engine: $ENGINE"
  fi
done
