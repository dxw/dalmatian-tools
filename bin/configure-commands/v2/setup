#!/bin/bash

# exit on failures
set -e
set -o pipefail

log_info -l "----------------------------------------------------" -q "$QUIET_MODE"
log_info -l "| To enable us to deploy the resources across      |" -q "$QUIET_MODE"
log_info -l "| multiple AWS accounts, we will configure AWS SSO |" -q "$QUIET_MODE"
log_info -l "| and store the required AWS profiles, and other   |" -q "$QUIET_MODE"
log_info -l "| configuration within:                            |" -q "$QUIET_MODE"
log_info -l "| \`\$HOME/.config/dalmatian\`                        |" -q "$QUIET_MODE"
log_info -l "|                                                  |" -q "$QUIET_MODE"
log_info -l "| This configuration will then be automatically    |" -q "$QUIET_MODE"
log_info -l "| loaded and used when running other dalmatian     |" -q "$QUIET_MODE"
log_info -l "| tools commands                                   |" -q "$QUIET_MODE"
log_info -l "----------------------------------------------------" -q "$QUIET_MODE"

mkdir -p "$CONFIG_DIR"
mkdir -p "$CONFIG_CACHE_DIR"

usage() {
  echo "Usage: dalmatian $(basename "$0") [OPTIONS]" 1>&2
  echo "  -h                     - help"
  echo "  -f <setup_filepath>    - Setup Filepath (Optional)"
  echo "  -u <setup_url>         - Setup URL (Optional)"
  exit 1
}

SETUP_FILE_PATH=""
while getopts "f:u:h" opt; do
  case $opt in
    f)
      SETUP_FILE_PATH="$OPTARG"
      ;;
    u)
      SETUP_FILE_URL="$OPTARG"
      ;;
    h)
      usage
      ;;
    *)
      usage
      ;;
  esac
done

if [ -n "$SETUP_FILE_PATH" ]
then
  if [ -f "$SETUP_FILE_PATH" ]
  then
    SETUP_JSON=$(jq -r < "$SETUP_FILE_PATH")
  else
    err "'$SETUP_FILE_PATH' doesn't exist!"
    exit 1
  fi
elif [ -n "$SETUP_FILE_URL" ]
then
  SETUP_JSON=$(curl -s "$SETUP_FILE_URL")
elif [ -f "$CONFIG_SETUP_JSON_FILE" ]
then
  SETUP_JSON=$(jq -r < "$CONFIG_SETUP_JSON_FILE")
else
  SETUP_JSON=$(
    jq -n \
    --arg project_name "" \
    --arg default_region "" \
    --arg main_dalmatian_account_id "" \
    --arg aws_sso_start_url "" \
    --arg aws_sso_region "" \
    --arg aws_sso_registraion_scopes "sso:account:access" \
    --arg aws_sso_default_admin_role_name "" \
    --arg backend_s3_bucket_name "" \
    --arg backend_s3_bucket_region "" \
    '{
      project_name: $project_name,
      default_region: $default_region,
      main_dalmatian_account_id: $main_dalmatian_account_id,
      aws_sso: {
        start_url: $aws_sso_start_url,
        region: $aws_sso_region,
        registration_scopes: $aws_sso_registraion_scopes,
        default_admin_role_name: $aws_sso_default_admin_role_name
      },
      backend: {
        s3: {
          bucket_name: $backend_s3_bucket_name,
          bucket_region: $backend_s3_bucket_region
        }
      }
    }'
  )
fi
echo "$SETUP_JSON" > "$CONFIG_SETUP_JSON_FILE"

log_info -l "-- Dalmatian Setup --" -q "$QUIET_MODE"
read_prompt_with_setup_default -p "Dalmatian project name" -d "project_name" -s
DEFAULT_REGION=$(read_prompt_with_setup_default -p "Default AWS Region" -d "default_region")

log_info -l "-- AWS SSO configration --" -q "$QUIET_MODE"
read_prompt_with_setup_default -p "AWS SSO start URL" -d "aws_sso.start_url" -s
read_prompt_with_setup_default -p "AWS SSO Region" -d "aws_sso.region" -s
read_prompt_with_setup_default -p "AWS SSO Default administrative role name" -d "aws_sso.default_admin_role_name" -s
read_prompt_with_setup_default -p "AWS SSO Registration Scopes" -d "aws_sso.registration_scopes" -s

log_info -l "-- Backend Configuration --" -q "$QUIET_MODE"
log_info -l "Enter the S3 backend configuration parameters" -q "$QUIET_MODE"
BACKEND_S3_BUCKET_NAME=$(read_prompt_with_setup_default -p "Bucket Name" -d "backend.s3.bucket_name")
BACKEND_S3_BUCKET_REGION=$(read_prompt_with_setup_default -p "Bucket Region" -d "backend.s3.bucket_region")

cat <<EOT > "$CONFIG_ACCOUNT_BOOTSTRAP_BACKEND_VARS_FILE"
bucket               = "$BACKEND_S3_BUCKET_NAME"
workspace_key_prefix = "account-bootstrap"
key                  = "terraform.tfstate"
region               = "$BACKEND_S3_BUCKET_REGION"
profile              = "dalmatian-main"
encrypt              = true
EOT

cat <<EOT > "$CONFIG_INFRASTRUCTURE_BACKEND_VARS_FILE"
bucket               = "$BACKEND_S3_BUCKET_NAME"
workspace_key_prefix = "infrastructure"
key                  = "terraform.tfstate"
region               = "$BACKEND_S3_BUCKET_REGION"
profile              = "dalmatian-main"
encrypt              = true
EOT

log_info -l "--- Dalmatian account configuration ---" -q "$QUIET_MODE"
MAIN_DALMATIAN_ACCOUNT_ID=$(read_prompt_with_setup_default -p "Main dalmatian account ID" -d "main_dalmatian_account_id")

"$APP_ROOT/bin/dalmatian" aws-sso generate-config

"$APP_ROOT/bin/dalmatian" aws-sso account-init -i "$MAIN_DALMATIAN_ACCOUNT_ID" -r "$DEFAULT_REGION" -n "dalmatian-main"

log_info -l "Setup complete!" -q "$QUIET_MODE"
log_info -l "It is highly recommended to run the first account bootstrap for the main dalmatian account now, using \`dalmatian deploy account-bootstrap -a $MAIN_DALMATIAN_ACCOUNT_ID-$DEFAULT_REGION-dalmatian-main\`" -q "$QUIET_MODE"
read -rp "Do you want to run this now? [y/n]: " DEPLOY_NOW
if [[ "$DEPLOY_NOW" == "y" || "$DEPLOY_NOW" == "Y" ]]
then
  "$APP_ROOT/bin/dalmatian" deploy account-bootstrap -a "$MAIN_DALMATIAN_ACCOUNT_ID-$DEFAULT_REGION-dalmatian-main"
fi
