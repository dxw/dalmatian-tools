#!/bin/bash

# exit on failures
set -e
set -o pipefail

usage() {
  echo "Usage: $(basename "$0") [OPTIONS]" 1>&2
  echo "  -h                          - help"
  echo "  -n <new_only>               - Only donwload new tfvars - will not overwrite existing tfavrs in cache (Optional)"
  exit 1
}

DALMATIAN_ACCOUNT_DEFAULT_REGION="$(jq -r '.default_region' < "$CONFIG_SETUP_JSON_FILE")"
PROJECT_NAME="$(jq -r '.project_name' < "$CONFIG_SETUP_JSON_FILE")"
PROJECT_NAME_HASH="$(echo -n "$PROJECT_NAME" | sha1sum | head -c 6)"
TFVARS_BUCKET_NAME="$PROJECT_NAME_HASH-tfvars"
TFVARS_BUCKET_EXISTS=0
TFVARS_PATHS_JSON="{}"
NEW_TFVARS_ONLY=0

while getopts "nh" opt; do
  case $opt in
    n)
      NEW_TFVARS_ONLY=1
      ;;
    h)
      usage
      ;;
    *)
      usage
      ;;
  esac
done

if [ "$NEW_TFVARS_ONLY" == 1 ]
then
  echo "==> Checking for and downloading new tfvars files only ..."
fi

echo "==> Checking existance of tfvars bucket $TFVARS_BUCKET_NAME"
if aws s3api head-bucket --bucket "$TFVARS_BUCKET_NAME" > /dev/null 2>&1
then
  echo "==> $TFVARS_BUCKET_NAME bucket exists ..."
  TFVARS_BUCKET_EXISTS=1
else
  echo "==> $TFVARS_BUCKET_NAME bucket doesn't exist. Bucket will be created on first deployment."
  TFVARS_BUCKET_EXISTS=0
fi

mkdir -p "$CONFIG_TFVARS_DIR"
DEAFULT_TFAVRS_FILE_NAME="000-terraform.tfvars"

if [ "$TFVARS_BUCKET_EXISTS" == 1 ]
then
  echo "==> Downloading tfvars ..."

  TFVAR_FILE_META_JSON="$(
    "$APP_ROOT/bin/dalmatian" aws-sso run-command \
      -p dalmatian-main \
      s3api head-object \
      --bucket "$TFVARS_BUCKET_NAME" \
      --key "$DEAFULT_TFAVRS_FILE_NAME" \
      2>/dev/null || true
  )"
  if [[ "$TFVAR_FILE_META_JSON" ]]
  then
    if [[ "$NEW_TFVARS_ONLY" == 0 || ! -f "$CONFIG_TFVARS_DIR/$DEAFULT_TFAVRS_FILE_NAME" ]]
    then
      aws s3 cp "s3://$TFVARS_BUCKET_NAME/$DEAFULT_TFAVRS_FILE_NAME" "$CONFIG_TFVARS_DIR/."
    fi
    TFVAR_FILE_REMOTE_LAST_MODIFIED_DATE="$(echo "$TFVAR_FILE_META_JSON" | jq -r '.LastModified')"
    TFVAR_FILE_REMOTE_LAST_MODIFIED="$(gdate -d "$TFVAR_FILE_REMOTE_LAST_MODIFIED_DATE" +%s)"
    TFVAR_FILE_LOCAL_LAST_MODIFIED="$(gdate -r "$CONFIG_TFVARS_DIR/$DEAFULT_TFAVRS_FILE_NAME" +%s)"
    if [[ "$TFVAR_FILE_REMOTE_LAST_MODIFIED" -gt "$TFVAR_FILE_LOCAL_LAST_MODIFIED" ]]
    then
      aws s3 cp "s3://$TFVARS_BUCKET_NAME/$DEAFULT_TFAVRS_FILE_NAME" "$CONFIG_TFVARS_DIR/."
    fi
    DEFAULT_TFVARS_EXISTS=1
  else
    DEFAULT_TFVARS_EXISTS=0
  fi

  TFVAR_FILE_META_JSON="$(
    "$APP_ROOT/bin/dalmatian" aws-sso run-command \
      -p dalmatian-main \
      s3api head-object \
      --bucket "$TFVARS_BUCKET_NAME" \
      --key "$CONFIG_GLOBAL_ACCOUNT_BOOSTRAP_TFVARS_FILE" \
      2>/dev/null || true
  )"
  if [[ "$TFVAR_FILE_META_JSON" ]]
  then
    if [[ "$NEW_TFVARS_ONLY" == 0 || ! -f "$CONFIG_TFVARS_DIR/$CONFIG_GLOBAL_ACCOUNT_BOOSTRAP_TFVARS_FILE" ]]
    then
      aws s3 cp "s3://$TFVARS_BUCKET_NAME/$CONFIG_GLOBAL_ACCOUNT_BOOSTRAP_TFVARS_FILE" "$CONFIG_TFVARS_DIR/."
    fi
    TFVAR_FILE_REMOTE_LAST_MODIFIED_DATE="$(echo "$TFVAR_FILE_META_JSON" | jq -r '.LastModified')"
    TFVAR_FILE_REMOTE_LAST_MODIFIED="$(gdate -d "$TFVAR_FILE_REMOTE_LAST_MODIFIED_DATE" +%s)"
    TFVAR_FILE_LOCAL_LAST_MODIFIED="$(gdate -r "$CONFIG_TFVARS_DIR/$CONFIG_GLOBAL_ACCOUNT_BOOSTRAP_TFVARS_FILE" +%s)"
    if [[ "$TFVAR_FILE_REMOTE_LAST_MODIFIED" -gt "$TFVAR_FILE_LOCAL_LAST_MODIFIED" ]]
    then
      aws s3 cp "s3://$TFVARS_BUCKET_NAME/$CONFIG_GLOBAL_ACCOUNT_BOOSTRAP_TFVARS_FILE" "$CONFIG_TFVARS_DIR/."
    fi
    GLOBAL_ACCOUNT_BOOSTRAP_TFVARS_FILE_EXISTS=1
  else
    GLOBAL_ACCOUNT_BOOSTRAP_TFVARS_FILE_EXISTS=0
  fi

  TFVAR_FILE_META_JSON="$(
    "$APP_ROOT/bin/dalmatian" aws-sso run-command \
      -p dalmatian-main \
      s3api head-object \
      --bucket "$TFVARS_BUCKET_NAME" \
      --key "$CONFIG_GLOBAL_INFRASTRUCTURE_TFVARS_FILE" \
      2>/dev/null || true
  )"
  if [[ "$TFVAR_FILE_META_JSON" ]]
  then
    if [[ "$NEW_TFVARS_ONLY" == 0 || ! -f "$CONFIG_TFVARS_DIR/$CONFIG_GLOBAL_INFRASTRUCTURE_TFVARS_FILE" ]]
    then
      aws s3 cp "s3://$TFVARS_BUCKET_NAME/$CONFIG_GLOBAL_INFRASTRUCTURE_TFVARS_FILE" "$CONFIG_TFVARS_DIR/."
    fi
    TFVAR_FILE_REMOTE_LAST_MODIFIED_DATE="$(echo "$TFVAR_FILE_META_JSON" | jq -r '.LastModified')"
    TFVAR_FILE_REMOTE_LAST_MODIFIED="$(gdate -d "$TFVAR_FILE_REMOTE_LAST_MODIFIED_DATE" +%s)"
    TFVAR_FILE_LOCAL_LAST_MODIFIED="$(gdate -r "$CONFIG_TFVARS_DIR/$CONFIG_GLOBAL_INFRASTRUCTURE_TFVARS_FILE" +%s)"
    if [[ "$TFVAR_FILE_REMOTE_LAST_MODIFIED" -gt "$TFVAR_FILE_LOCAL_LAST_MODIFIED" ]]
    then
      aws s3 cp "s3://$TFVARS_BUCKET_NAME/$CONFIG_GLOBAL_INFRASTRUCTURE_TFVARS_FILE" "$CONFIG_TFVARS_DIR/."
    fi
    GLOBAL_INFRASTRUCTURE_TFVARS_FILE_EXISTS=1
  else
    GLOBAL_INFRASTRUCTURE_TFVARS_FILE_EXISTS=0
  fi
fi

if [[ "$TFVARS_BUCKET_EXISTS" == 0 || "$DEFAULT_TFVARS_EXISTS" == 0 ]]
then
  echo "==> $DEAFULT_TFAVRS_FILE_NAME doesn't exist in tfvars S3 bucket."
  echo "project_name=\"$PROJECT_NAME\"" > "$CONFIG_TFVARS_DIR/$DEAFULT_TFAVRS_FILE_NAME"
  echo "aws_region=\"$DALMATIAN_ACCOUNT_DEFAULT_REGION\"" >> "$CONFIG_TFVARS_DIR/$DEAFULT_TFAVRS_FILE_NAME"
  echo "==> Created $CONFIG_TFVARS_DIR/$DEAFULT_TFAVRS_FILE_NAME"
fi

if [ "$GLOBAL_ACCOUNT_BOOSTRAP_TFVARS_FILE_EXISTS" == "0" ]
then
  cp "$APP_ROOT/data/tfvars-templates/account-bootstrap.tfvars" "$CONFIG_TFVARS_DIR/$CONFIG_GLOBAL_ACCOUNT_BOOSTRAP_TFVARS_FILE"
fi

if [ "$GLOBAL_INFRASTRUCTURE_TFVARS_FILE_EXISTS" == "0" ]
then
  cp "$APP_ROOT/data/tfvars-templates/infrastructure.tfvars" "$CONFIG_TFVARS_DIR/$CONFIG_INFRASTRUCTURE_BOOSTRAP_TFVARS_FILE"
fi

TFVARS_DIR="${CONFIG_TFVARS_DIR/$HOME/~}"
TFVARS_PATHS_JSON=$(echo "$TFVARS_PATHS_JSON" | jq -c \
  --arg default_tfvars_file "$DEAFULT_TFAVRS_FILE_NAME" \
  --arg default_tfvars_path "$TFVARS_DIR/$DEAFULT_TFAVRS_FILE_NAME" \
  '. += { "terraform": { "path": $default_tfvars_path, "key": $default_tfvars_file } }')

TFVARS_PATHS_JSON=$(echo "$TFVARS_PATHS_JSON" | jq -c \
    --arg global_account_bootstrap_tfvars_file "$CONFIG_GLOBAL_ACCOUNT_BOOSTRAP_TFVARS_FILE" \
    --arg global_account_bootstrap_tfvars_path "$TFVARS_DIR/$CONFIG_GLOBAL_ACCOUNT_BOOSTRAP_TFVARS_FILE" \
    '. += { "global-account-bootstrap": { "path": $global_account_bootstrap_tfvars_path, "key": $global_account_bootstrap_tfvars_file } }')

TFVARS_PATHS_JSON=$(echo "$TFVARS_PATHS_JSON" | jq -c \
    --arg global_infrastructure_tfvars_file "$CONFIG_GLOBAL_INFRASTRUCTURE_TFVARS_FILE" \
    --arg global_infrastructure_tfvars_path "$TFVARS_DIR/$CONFIG_GLOBAL_INFRASTRUCTURE_TFVARS_FILE" \
    '. += { "global-infrastructure": { "path": $global_infrastructure_tfvars_path, "key": $global_infrastructure_tfvars_file } }')

while IFS='' read -r workspace <&9
do
  workspace=${workspace/\*/ }
  workspace=$(echo "$workspace" | xargs)
  if [[
    "$workspace" != "default" &&
    -n "$workspace"
  ]]
  then
    WORKSPACE_TFVARS_FILE="100-$workspace.tfvars"
    WORKSPACE_TFVARS_ADD_TO_PATHS_JSON=0
    WORKSPACE_TFVARS_FILE_EXISTS=0
    if [ "$TFVARS_BUCKET_EXISTS" == 1 ]
    then
      TFVAR_FILE_META_JSON="$(
        "$APP_ROOT/bin/dalmatian" aws-sso run-command \
          -p dalmatian-main \
          s3api head-object \
          --bucket "$TFVARS_BUCKET_NAME" \
          --key "$WORKSPACE_TFVARS_FILE" \
          2>/dev/null || true
      )"
      if [[ "$TFVAR_FILE_META_JSON" ]]
      then
        if [[ "$NEW_TFVARS_ONLY" == 0 || ! -f "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE" ]]
        then
          aws s3 cp "s3://$TFVARS_BUCKET_NAME/$WORKSPACE_TFVARS_FILE" "$CONFIG_TFVARS_DIR/."
        fi
        TFVAR_FILE_REMOTE_LAST_MODIFIED_DATE="$(echo "$TFVAR_FILE_META_JSON" | jq -r '.LastModified')"
        TFVAR_FILE_REMOTE_LAST_MODIFIED="$(gdate -d "$TFVAR_FILE_REMOTE_LAST_MODIFIED_DATE" +%s)"
        TFVAR_FILE_LOCAL_LAST_MODIFIED="$(gdate -r "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE" +%s)"
        if [[ "$TFVAR_FILE_REMOTE_LAST_MODIFIED" -gt "$TFVAR_FILE_LOCAL_LAST_MODIFIED" ]]
        then
          aws s3 cp "s3://$TFVARS_BUCKET_NAME/$WORKSPACE_TFVARS_FILE" "$CONFIG_TFVARS_DIR/."
        fi
        WORKSPACE_TFVARS_ADD_TO_PATHS_JSON=1
        WORKSPACE_TFVARS_FILE_EXISTS=1
      fi
    fi
    if [[ "$WORKSPACE_TFVARS_FILE_EXISTS" == "0" && "$NEW_TFVARS_ONLY" == 0 ]]
    then
      echo "==> $WORKSPACE_TFVARS_FILE doesn't exist ..."

      if yes_no "Do you want to create the $WORKSPACE_TFVARS_FILE file now? [y/n]: " "y"
      then
        WORKSPACE_TFVARS_HEADER=(
          "############################################################"
          "# Copied from the Global TFvars file                       #"
          "#                                                          #"
          "# To overwrite the global variable, uncomment the variable #"
          "# and change it's value                                    #"
          "#                                                          #"
          "# All unchanged variables will be deleted from this file   #"
          "# once it is saved                                         #"
          "############################################################"
        )
        printf '%s\n' "${WORKSPACE_TFVARS_HEADER[@]}" > "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"

        GLOBAL_CONFIG_LINES=()
        while IFS='' read -r global_config_line
        do
          GLOBAL_CONFIG_LINES+=("$global_config_line")
        done < "$CONFIG_TFVARS_DIR/$CONFIG_GLOBAL_ACCOUNT_BOOSTRAP_TFVARS_FILE"
        printf '#%s\n' "${GLOBAL_CONFIG_LINES[@]}" >> "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"

        $EDITOR "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"

        for workspace_tfvars_header_line in "${WORKSPACE_TFVARS_HEADER[@]}"
        do
          grep -v "^$workspace_tfvars_header_line$" "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE" > "/tmp/$WORKSPACE_TFVARS_FILE"
          mv "/tmp/$WORKSPACE_TFVARS_FILE" "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"
        done

        for global_config_line in "${GLOBAL_CONFIG_LINES[@]}"
        do
          sed -i '' "s/^\#$//g" "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"
          if [[ ! "$global_config_line" =~ ^\#.* ]]
          then
            global_config_line=$(echo "$global_config_line" | sed 's/\[/\\[/g; s/\]/\\]/g; s/\*/\\*/g')
            grep -v "^#$global_config_line$" "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE" > "/tmp/$WORKSPACE_TFVARS_FILE"
            mv "/tmp/$WORKSPACE_TFVARS_FILE" "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"
          else
            sed -i '' "s/^\#$global_config_line$/$global_config_line/g" "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"
          fi
        done

        WORKSPACE_TFVARS_ADD_TO_PATHS_JSON=1
      fi
    fi

    if [ "$WORKSPACE_TFVARS_ADD_TO_PATHS_JSON" == "1" ]
    then
      TFVARS_PATHS_JSON=$(echo "$TFVARS_PATHS_JSON" | jq -c \
        --arg workspace_name "$workspace" \
        --arg workspace_tfvars_file "$WORKSPACE_TFVARS_FILE" \
        --arg workspace_tfvars_path "$TFVARS_DIR/$WORKSPACE_TFVARS_FILE" \
        '. += { "\($workspace_name)": { "path": $workspace_tfvars_path, "key": $workspace_tfvars_file } }')
    fi
  fi
done 9< <("$APP_ROOT/bin/dalmatian" terraform-dependencies run-terraform-command -c "workspace list" -a -q)

while IFS='' read -r workspace <&9
do
  workspace=${workspace/\*/ }
  workspace=$(echo "$workspace" | xargs)
  if [[
    "$workspace" != "default" &&
    -n "$workspace"
  ]]
  then
    WORKSPACE_TFVARS_FILE="200-$workspace.tfvars"
    WORKSPACE_TFVARS_ADD_TO_PATHS_JSON=0
    WORKSPACE_TFVARS_FILE_EXISTS=0
    if [ "$TFVARS_BUCKET_EXISTS" == 1 ]
    then
      TFVAR_FILE_META_JSON="$(
        "$APP_ROOT/bin/dalmatian" aws-sso run-command \
          -p dalmatian-main \
          s3api head-object \
          --bucket "$TFVARS_BUCKET_NAME" \
          --key "$WORKSPACE_TFVARS_FILE" \
          2>/dev/null || true
      )"
      if [[ "$TFVAR_FILE_META_JSON" ]]
      then
        if [[ "$NEW_TFVARS_ONLY" == 0 || ! -f "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE" ]]
        then
          aws s3 cp "s3://$TFVARS_BUCKET_NAME/$WORKSPACE_TFVARS_FILE" "$CONFIG_TFVARS_DIR/."
        fi
        TFVAR_FILE_REMOTE_LAST_MODIFIED_DATE="$(echo "$TFVAR_FILE_META_JSON" | jq -r '.LastModified')"
        TFVAR_FILE_REMOTE_LAST_MODIFIED="$(gdate -d "$TFVAR_FILE_REMOTE_LAST_MODIFIED_DATE" +%s)"
        TFVAR_FILE_LOCAL_LAST_MODIFIED="$(gdate -r "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE" +%s)"
        if [[ "$TFVAR_FILE_REMOTE_LAST_MODIFIED" -gt "$TFVAR_FILE_LOCAL_LAST_MODIFIED" ]]
        then
          aws s3 cp "s3://$TFVARS_BUCKET_NAME/$WORKSPACE_TFVARS_FILE" "$CONFIG_TFVARS_DIR/."
        fi
        WORKSPACE_TFVARS_ADD_TO_PATHS_JSON=1
        WORKSPACE_TFVARS_FILE_EXISTS=1
      fi
    fi
    if [[ "$WORKSPACE_TFVARS_FILE_EXISTS" == "0" && "$NEW_TFVARS_ONLY" == 0 ]]
    then
      echo "==> $WORKSPACE_TFVARS_FILE doesn't exist ..."
      if yes_no "Do you want to create the $WORKSPACE_TFVARS_FILE file now? [y/n]:" "y"
      then
        WORKSPACE_TFVARS_HEADER=(
          "############################################################"
          "# Copied from the Global TFvars file                       #"
          "#                                                          #"
          "# To overwrite the global variable, uncomment the variable #"
          "# and change it's value                                    #"
          "#                                                          #"
          "# All unchanged variables will be deleted from this file   #"
          "# once it is saved                                         #"
          "############################################################"
        )
        printf '%s\n' "${WORKSPACE_TFVARS_HEADER[@]}" > "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"

        GLOBAL_CONFIG_LINES=()
        while IFS='' read -r global_config_line
        do
          GLOBAL_CONFIG_LINES+=("$global_config_line")
        done < "$CONFIG_TFVARS_DIR/$CONFIG_GLOBAL_INFRASTRUCTURE_TFVARS_FILE"
        printf '#%s\n' "${GLOBAL_CONFIG_LINES[@]}" >> "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"

        $EDITOR "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"

        for workspace_tfvars_header_line in "${WORKSPACE_TFVARS_HEADER[@]}"
        do
          grep -v "^$workspace_tfvars_header_line$" "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE" > "/tmp/$WORKSPACE_TFVARS_FILE"
          mv "/tmp/$WORKSPACE_TFVARS_FILE" "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"
        done

        for global_config_line in "${GLOBAL_CONFIG_LINES[@]}"
        do
          sed -i '' "s/^\#$//g" "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"
          if [[ ! "$global_config_line" =~ ^\#.* ]]
          then
            global_config_line=$(echo "$global_config_line" | sed 's/\[/\\[/g; s/\]/\\]/g; s/\*/\\*/g')
            grep -v "^#$global_config_line$" "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE" > "/tmp/$WORKSPACE_TFVARS_FILE"
            mv "/tmp/$WORKSPACE_TFVARS_FILE" "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"
          else
            sed -i '' "s/^\#$global_config_line$/$global_config_line/g" "$CONFIG_TFVARS_DIR/$WORKSPACE_TFVARS_FILE"
          fi
        done

        WORKSPACE_TFVARS_ADD_TO_PATHS_JSON=1
      fi
    fi

    if [ "$WORKSPACE_TFVARS_ADD_TO_PATHS_JSON" == "1" ]
    then
      TFVARS_PATHS_JSON=$(echo "$TFVARS_PATHS_JSON" | jq -c \
        --arg workspace_name "$workspace" \
        --arg workspace_tfvars_file "$WORKSPACE_TFVARS_FILE" \
        --arg workspace_tfvars_path "$TFVARS_DIR/$WORKSPACE_TFVARS_FILE" \
        '. += { "\($workspace_name)": { "path": $workspace_tfvars_path, "key": $workspace_tfvars_file } }')
    fi
  fi
done 9< <("$APP_ROOT/bin/dalmatian" terraform-dependencies run-terraform-command -c "workspace list" -i -q)

echo "$TFVARS_PATHS_JSON" > "$CONFIG_TFVARS_PATHS_FILE"
