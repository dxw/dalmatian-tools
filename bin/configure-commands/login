#!/bin/bash

echo "Note: You must have a Dalmatian Admin account to use Dalmatian Tools"
echo

# Check to see if oathtool is installed, and prompt to install it if it isn't
if ! is_installed "oathtool"; then
  if yes_no "Install oathtool now? (Y/n)" "Y"; then
    BREW_BIN=$(command -v "brew")
    $BREW_BIN install oath-toolkit
  else
    echo "Please run \`brew install oath-toolkit\` before trying again"
    exit 1
  fi
fi

if ! "$APP_ROOT/bin/aws/awscli-version"
then
  exit 1
fi

DALMATIAN_CONFIG_STORE="$HOME/.config/dalmatian"
DALMATIAN_CONFIG_FILE="$DALMATIAN_CONFIG_STORE/config.json"
DALMATIAN_CREDENTIALS_FILE="$DALMATIAN_CONFIG_STORE/credentials.json.enc"

mkdir -p "$DALMATIAN_CONFIG_STORE"

DALMATIAN_ROLE="dalmatian-admin"

if ! command -v gpg > /dev/null
then
  err "GPG is not installed on this system. Please install GPG to continue"
  echo "    https://gpgtools.org/ is recommended for MacOS"
  exit 1
fi
echo "For added security, your credentials and MFA secret will be"
echo "encrypted with GPG"
echo ""
read -rp "Email associated with GPG key: " GPG_ENCRYPT_EMAIL
read -rp "AWS Access Key ID: " AWS_ACCESS_KEY_ID
read -rsp "AWS Secret Access Key: " AWS_SECRET_ACCESS_KEY
echo ""
echo "This is your MFA secret not a generated 6 character MFA code"
echo "https://github.com/dxw/dalmatian-tools#why-am-i-seeing-oathtool-base32-decoding-failed-base32-string-is-invalid"
read -rsp "AWS MFA Secret: " AWS_MFA_SECRET
echo ""

echo "==> Checking credentials..."
if [ ${#AWS_MFA_SECRET} -lt 7 ]
then
  echo "==> please enter your MFA secret not your generated MFA code"
  echo "==> please see https://github.com/dxw/dalmatian-tools#why-am-i-seeing-oathtool-base32-decoding-failed-base32-string-is-invalid"
  exit 1
fi

export AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY

CALLER_ID=$(aws sts get-caller-identity)

USER_ID=$(echo "$CALLER_ID" | jq -r '.UserId')
ACCOUNT_ID=$(echo "$CALLER_ID" | jq -r '.Account')
USER_ARN=$(echo "$CALLER_ID" | jq -r '.Arn')

echo "  User ID: $USER_ID"
echo "  Account: $ACCOUNT_ID"
echo "  Arn:     $USER_ARN"

echo "==> Checking access key age"
if ! "$APP_ROOT/bin/aws/key-age"
then
  exit 1
fi

echo "==> Saving configuration settings in $DALMATIAN_CONFIG_FILE ..."

CONFIG_JSON_STRING=$(
  jq -n \
  --arg gpg_encrypt_email "$GPG_ENCRYPT_EMAIL" \
  --arg account_id "$ACCOUNT_ID" \
  --arg dalmatian_role "$DALMATIAN_ROLE" \
  '{
    gpg_encrypt_email: $gpg_encrypt_email,
    account_id: $account_id,
    dalmatian_role: $dalmatian_role
  }'
)

echo "$CONFIG_JSON_STRING" > "$DALMATIAN_CONFIG_FILE"

echo "==> Attempting MFA..."

MFA_CODE="$(oathtool --base32 --totp "$AWS_MFA_SECRET")"

if [ ${#MFA_CODE} -ne 6 ]
then
  err "Failed to generate an MFA code"
  echo "==> please see https://github.com/dxw/dalmatian-tools#why-am-i-seeing-oathtool-base32-decoding-failed-base32-string-is-invalid"
  exit 1
fi

export AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY

if "$APP_ROOT/bin/aws/mfa" -m "$MFA_CODE"
then
  echo "==> Login success!"
  echo "==> Storing credentials in $DALMATIAN_CREDENTIALS_FILE"

  CREDENTIALS_JSON_STRING=$(
    jq -n \
    --arg aws_access_key_id "$AWS_ACCESS_KEY_ID" \
    --arg aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" \
    --arg aws_mfa_secret "$AWS_MFA_SECRET" \
    '{
      aws_access_key_id: $aws_access_key_id,
      aws_secret_access_key: $aws_secret_access_key,
      aws_mfa_secret: $aws_mfa_secret
    }'
  )

  echo "$CREDENTIALS_JSON_STRING" | gpg \
    --quiet \
    --batch --yes \
    --encrypt \
    -r "$GPG_ENCRYPT_EMAIL" \
    --out "$DALMATIAN_CREDENTIALS_FILE"
  chmod 600 "$DALMATIAN_CREDENTIALS_FILE"
else
  err "Something went wrong when generating your MFA credentials with AWS. Please try again."
  exit 1
fi
