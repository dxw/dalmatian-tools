#!/bin/bash

# exit on failures
set -e
set -o pipefail

usage() {
  echo "Usage: $(basename "$0")" 1>&2
  echo "  SUBCOMMAND COMMAND     - dalmatian command to run"
  echo "  SUBCOMMAND COMMAND -h  - show command help"
  echo "    Or:"
  echo "  -h                     - help"
  echo "  -l                     - list commands"
  exit 1
}

# if there are no arguments passed exit with usage
if [ $# -lt 1 ];
then
 usage
fi

IS_PARENT_SCRIPT=0
if [ "$(ps -o stat= -p $PPID | tr -d ' ')" == "S" ]
then
  IS_PARENT_SCRIPT=1
fi

APP_ROOT="$( cd "$(dirname "${BASH_SOURCE[0]}")"/.. && pwd -P)"
export APP_ROOT

BASH_FUNCTION_DIR="$APP_ROOT/lib/bash-functions"
for bash_function_file in "$BASH_FUNCTION_DIR"/*
do
  if [[ ! -f "$bash_function_file" ]]
  then
    continue
  fi
  # shellcheck source=/dev/null
  source "$bash_function_file"
  while IFS='' read -r function_name
  do
    export -f "${function_name?}"
  done < <(grep "^function" "$bash_function_file" | cut -d" " -f2)
done

if [ "${1:0:1}" == "-" ]
then
  while getopts "lh" opt; do
    case $opt in
      l)
        LIST_COMMANDS=1
        ;;
      h)
        usage
        ;;
      *)
        usage
        ;;
    esac
  done

  if [ -n "$LIST_COMMANDS" ]
  then
    echo "Available commands:"
    echo ""

    DIRS=()
    while IFS=  read -r -d $'\0'; do
      DIRS+=("$REPLY")
    done < <(find "$APP_ROOT/bin" -maxdepth 1 -type d -print0)

    SUBCOMMANDS=()
    for d in "${DIRS[@]}"
    do
      SUBCOMMANDS+=("$(basename "$d")")
    done
    IFS=" " read -r -a SUBCOMMANDS <<< "$(sort <<<"${SUBCOMMANDS[*]}")"

    # list configure-commands
    FILES=()
    while IFS=  read -r -d $'\0'; do
      FILES+=("$REPLY")
    done < <(find "$APP_ROOT/bin/configure-commands" -maxdepth 1 -type f -print0)

    CONFIGURE_COMMANDS=()
    for f in "${FILES[@]}"
    do
      CONFIGURE_COMMANDS+=("$(basename "$f")")
    done
    IFS=" " read -r -a CONFIGURE_COMMANDS <<< "$(sort <<<"${CONFIGURE_COMMANDS[*]}")"

    for CONFIGURE_COMMAND in "${CONFIGURE_COMMANDS[@]}"
    do
      echo "  $CONFIGURE_COMMAND"
    done
    echo ""

    for SUBCOMMAND in "${SUBCOMMANDS[@]}"
    do
      if [[ "$SUBCOMMAND" != "bin" && "$SUBCOMMAND" != "tmp" && "$SUBCOMMAND" != "configure-commands" && "$SUBCOMMAND" != "setup" ]]
      then
        echo "  $SUBCOMMAND"
        FILES=()
        while IFS=  read -r -d $'\0'; do
          FILES+=("$REPLY")
        done < <(find "$APP_ROOT/bin/$SUBCOMMAND" -maxdepth 1 -type f -print0)

        COMMANDS=()
        for f in "${FILES[@]}"
        do
          COMMANDS+=("$(basename "$f")")
        done
        IFS=" " read -r -a COMMANDS <<< "$(sort <<<"${COMMANDS[*]}")"

        for COMMAND in "${COMMANDS[@]}"
        do
          echo "    $COMMAND"
        done
        echo ""
      fi
    done
  fi
  exit 0
fi

SUBCOMMAND="$1"
COMMAND="$2"
COMMAND_ARGS=( "${@:3}" )
QUIET_MODE=0
for i in "${!COMMAND_ARGS[@]}"
do
  if [ "${COMMAND_ARGS[i]}" == "-q" ]
  then
    QUIET_MODE=1
    unset "COMMAND_ARGS[i]"
  fi
done
export QUIET_MODE

if [[ -z "$SUBCOMMAND" && -z "$COMMAND" ]]
then
  usage
fi

if [[
  -f "$APP_ROOT/bin/configure-commands/$SUBCOMMAND" &&
  "$SUBCOMMAND" != "setup" && # Ignore setup for now, this requires different prerequists
  "$SUBCOMMAND" != "update"
]]
then
  "$APP_ROOT/bin/configure-commands/$SUBCOMMAND"
  exit 0
fi

# List the experimental commands that utilise the new AWS SSO config here, so that
# they can be developed along side the original commands using the original
# authentication methods
if [[
  "$SUBCOMMAND" == "setup" ||
  "$SUBCOMMAND" == "update" ||
  "$SUBCOMMAND" == "aws-sso" ||
  "$SUBCOMMAND" == "terraform-dependencies" ||
  "$SUBCOMMAND" == "deploy"
]]
then
  export CONFIG_DIR="$HOME/.config/dalmatian"
  export CONFIG_SETUP_JSON_FILE="$CONFIG_DIR/setup.json"
  export CONFIG_UPDATE_CHECK_JSON_FILE="$CONFIG_DIR/update-check.json"
  export CONFIG_CACHE_DIR="$CONFIG_DIR/.cache"
  export CONFIG_AWS_SSO_FILE="$CONFIG_DIR/dalmatian-sso.config"
  export CONFIG_ACCOUNT_BOOTSTRAP_BACKEND_VARS_FILE="$CONFIG_DIR/account-bootstrap-backend.vars"
  export CONFIG_INFRASTRUCTURE_BACKEND_VARS_FILE="$CONFIG_DIR/infrastructure-backend.vars"
  export CONFIG_TFVARS_DIR="$CONFIG_CACHE_DIR/tfvars"
  export CONFIG_TFVARS_PATHS_FILE="$CONFIG_CACHE_DIR/tfvars-paths.json"
  export CONFIG_TFVARS_DEFAULT_ACCOUNT_BOOTSRAP_FILE="$APP_ROOT/data/tfvars-templates/account-bootstrap.tfvars"
  export CONFIG_TFVARS_DEFAULT_INFRASTRUCTURE_FILE="$APP_ROOT/data/tfvars-templates/infrastructure.tfvars"
  export CONFIG_GLOBAL_ACCOUNT_BOOSTRAP_TFVARS_FILE="000-global-account-bootstrap.tfvars"
  export CONFIG_GLOBAL_INFRASTRUCTURE_TFVARS_FILE="000-global-infrastructure.tfvars"
  export TMP_DIR="$APP_ROOT/tmp"
  export TMP_ACCOUNT_BOOTSTRAP_TERRAFORM_DIR="$TMP_DIR/terraform-dxw-dalmatian-account-bootstrap"
  export TMP_INFRASTRUCTURE_TERRAFORM_DIR="$TMP_DIR/terraform-dxw-dalmatian-infrastructure"

  export GIT_DALMATIAN_TOOLS_HOST="github.com"
  export GIT_DALMATIAN_TOOLS_OWNER="dxw"
  export GIT_DALMATIAN_TOOLS_REPO="dalmatian-tools"
  export GIT_DALMATIAN_TOOLS_API_URL="https://api.$GIT_DALMATIAN_TOOLS_HOST"
  export GIT_DALMATIAN_TOOLS_API_REPOS_URL="$GIT_DALMATIAN_TOOLS_API_URL/repos/$GIT_DALMATIAN_TOOLS_OWNER/$GIT_DALMATIAN_TOOLS_REPO"
  export GIT_DALMATIAN_TOOLS_API_REPOS_LATEST_RELEASE_URL="$GIT_DALMATIAN_TOOLS_API_REPOS_URL/releases/latest"
  export GIT_DALMATIAN_ACCOUNT_BOOTSTRAP_OWNER="dxw"
  export GIT_DALMATIAN_ACCOUNT_BOOTSTRAP_REPO="terraform-dxw-dalmatian-account-bootstrap"
  export GIT_DALMATIAN_INFRASTRUCTURE_OWNER="dxw"
  export GIT_DALMATIAN_INFRASTRUCTURE_REPO="terraform-dxw-dalmatian-infrastructure"

  export TERRAFORM_PROJECT_ACCOUNT_BOOTSTRAP_VERSION="v0.9.6"
  export TERRAFORM_PROJECT_INFRASTRUCTURE_VERSION="v0.15.3"

  export AWS_CONFIG_FILE="$CONFIG_AWS_SSO_FILE"
  export AWS_PROFILE="dalmatian-main"

  # These AWS environment variables take precedence when authenticating, which
  # can cause errors if they are not related to Dalmatian
  unset AWS_SESSION_TOKEN
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_ACCESS_KEY_ID
  unset AWS_DEFAULT_REGION
  unset AWS_DEFAULT_OUTPUT
  unset AWS_REGION
  unset AWS_ROLE_ARN
  unset AWS_ROLE_SESSION_NAME

  if [[
    "$SUBCOMMAND" != "update" &&
    "$SUBCOMMAND" != "setup"
  ]]
  then
    if [ "$IS_PARENT_SCRIPT" == 1 ]
    then
      "$APP_ROOT/bin/dalmatian" update -q
    fi
  fi

  if [[
    "$SUBCOMMAND" != "setup" &&
    ( "$SUBCOMMAND" != "aws-sso" && "$COMMAND" != "login" && "$COMMAND" != "generate-config" ) &&
    "$SUBCOMMAND" != "update"
  ]]
  then
    "$APP_ROOT/bin/dalmatian" aws-sso login
  fi

  if [[ -f "$APP_ROOT/bin/configure-commands/$SUBCOMMAND" ]]
  then
    COMMAND_ARGS=( "${@:2}" )
    QUIET_MODE=0
    for i in "${!COMMAND_ARGS[@]}"
    do
      if [ "${COMMAND_ARGS[i]}" == "-q" ]
      then
        QUIET_MODE=1
        unset "COMMAND_ARGS[i]"
      fi
    done
    export QUIET_MODE
    "$APP_ROOT/bin/configure-commands/$SUBCOMMAND" "${COMMAND_ARGS[@]}"
    exit 0
  fi

  # Run specified command with args
  "$APP_ROOT/bin/$SUBCOMMAND/$COMMAND" "${COMMAND_ARGS[@]}"
  exit 0
fi


DALMATIAN_CONFIG_STORE="$HOME/.config/dalmatian"
DALMATIAN_CONFIG_FILE="$DALMATIAN_CONFIG_STORE/config.json"
DALMATIAN_CREDENTIALS_FILE="$DALMATIAN_CONFIG_STORE/credentials.json.enc"
DALMATIAN_MFA_CREDENTIALS_FILE="$DALMATIAN_CONFIG_STORE/mfa_credentials.json"
DALMATIAN_ASSUME_MAIN_ROLE_CREDENTIALS_FILE="$DALMATIAN_CONFIG_STORE/assume_role_credentials.json"
MFA_CONFIGURED=0
ASSUME_MAIN_ROLE_CONFIGURED=0

if [ ! -f "$DALMATIAN_CONFIG_FILE" ]
then
  err "You are not logged into Dalmatian. Run \`dalmatian login\` to continue"
  exit 1
fi

AWS_DEFAULT_REGION="eu-west-2" # London
export AWS_DEFAULT_REGION

DALMATIAN_CONFIG_JSON_STRING=$(cat "$DALMATIAN_CONFIG_FILE")
ACCOUNT_ID=$(echo "$DALMATIAN_CONFIG_JSON_STRING" | jq -r '.account_id')
DALMATIAN_ROLE=$(echo "$DALMATIAN_CONFIG_JSON_STRING" | jq -r '.dalmatian_role')

# If MFA credentials exist, check if they have expired
if [ -f "$DALMATIAN_MFA_CREDENTIALS_FILE" ]
then
  DALMATIAN_MFA_CREDENTIALS_JSON_STRING=$(cat "$DALMATIAN_MFA_CREDENTIALS_FILE")
  DALMATIAN_MFA_EXPIRATION=$(echo "$DALMATIAN_MFA_CREDENTIALS_JSON_STRING" | jq -r '.aws_session_expiration')
  if [ "${DALMATIAN_MFA_EXPIRATION: -1}" == "Z" ]
  then
    DALMATIAN_MFA_EXPIRATION_SECONDS=$(date -j -f "%F T %T Z" "$DALMATIAN_MFA_EXPIRATION" +"%s")
  else
    DALMATIAN_MFA_EXPIRATION_SECONDS=$(date -j -f "%F T %T %z" "$DALMATIAN_MFA_EXPIRATION" +"%s")
  fi
  EPOCH=$(date +%s)
  if [ "$DALMATIAN_MFA_EXPIRATION_SECONDS" -lt "$EPOCH" ]
  then
    err "MFA credentials have expired"
  else
    MFA_CONFIGURED=1
  fi
fi

if [[ "$SUBCOMMAND" == "aws" && "$COMMAND" == "mfa" ]]
then
  RUN_AWS_MFA=1
fi

# Update MFA credentials if needed, or if the dalmatian aws mfa command is ran
if [[ -n "$RUN_AWS_MFA" || "$MFA_CONFIGURED" == 0 ]]
then
  DALMATIAN_CREDENTIALS_JSON_STRING=$(
    gpg --decrypt \
      --quiet \
      < "$DALMATIAN_CREDENTIALS_FILE"
  )

  AWS_ACCESS_KEY_ID=$(echo "$DALMATIAN_CREDENTIALS_JSON_STRING" | jq -r '.aws_access_key_id')
  AWS_SECRET_ACCESS_KEY=$(echo "$DALMATIAN_CREDENTIALS_JSON_STRING" | jq -r '.aws_secret_access_key')
  export AWS_ACCESS_KEY_ID
  export AWS_SECRET_ACCESS_KEY

  AWS_MFA_SECRET=$(echo "$DALMATIAN_CREDENTIALS_JSON_STRING" | jq -r '.aws_mfa_secret')
  MFA_CODE="$(oathtool --base32 --totp "$AWS_MFA_SECRET")"

  echo "==> Requesting new MFA credentials..."
  "$APP_ROOT/bin/aws/mfa" -m "$MFA_CODE"

  if [ -n "$RUN_AWS_MFA" ]
  then
    exit 0
  fi
fi

# export MFA credentials
DALMATIAN_MFA_CREDENTIALS_JSON_STRING=$(cat "$DALMATIAN_MFA_CREDENTIALS_FILE")
AWS_ACCESS_KEY_ID=$(echo "$DALMATIAN_MFA_CREDENTIALS_JSON_STRING" | jq -r '.aws_access_key_id')
AWS_SECRET_ACCESS_KEY=$(echo "$DALMATIAN_MFA_CREDENTIALS_JSON_STRING" | jq -r '.aws_secret_access_key')
AWS_SESSION_TOKEN=$(echo "$DALMATIAN_MFA_CREDENTIALS_JSON_STRING" | jq -r '.aws_session_token')
export AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY
export AWS_SESSION_TOKEN

AWS_CALLER_IDENTITY_ARN="$(aws sts get-caller-identity | jq '.Arn')"
IFS='/' read -r -a array <<< "$AWS_CALLER_IDENTITY_ARN"
export AWS_CALLER_IDENTITY_USERNAME="${array[2]%?}"

# Check if the assume role credentials have expired
if [ -f "$DALMATIAN_ASSUME_MAIN_ROLE_CREDENTIALS_FILE" ]
then
  DALMATIAN_ASSUME_MAIN_ROLE_CREDENTIALS_JSON_STRING=$(cat "$DALMATIAN_ASSUME_MAIN_ROLE_CREDENTIALS_FILE")
  DALMATIAN_ASSUME_MAIN_ROLE_CREDENTIALS_EXPIRATION=$(echo "$DALMATIAN_ASSUME_MAIN_ROLE_CREDENTIALS_JSON_STRING" | jq -r '.aws_session_expiration')
  DALMATIAN_ASSUME_MAIN_ROLE_CREDENTIALS_EXPIRATION_SECONDS=$(date -j -f "%F T %T %z" "$DALMATIAN_ASSUME_MAIN_ROLE_CREDENTIALS_EXPIRATION" +"%s")
  EPOCH=$(date +%s)
  if [ "$DALMATIAN_ASSUME_MAIN_ROLE_CREDENTIALS_EXPIRATION_SECONDS" -lt "$EPOCH" ]
  then
    err "'Assume role' credentials have expired"
  else
    ASSUME_MAIN_ROLE_CONFIGURED=1
  fi
fi

# Update assume role credentials if needed
if [ "$ASSUME_MAIN_ROLE_CONFIGURED" == "0" ]
then
  echo "==> Requesting 'Assume Role' credentials ..."
  ASSUME_ROLE_RESULT=$(
    aws sts assume-role \
    --role-arn "arn:aws:iam::$ACCOUNT_ID:role/$DALMATIAN_ROLE" \
    --role-session-name dalmatian-tools \
    --external-id dalmatian-tools
  )
  AWS_ACCESS_KEY_ID=$(echo "$ASSUME_ROLE_RESULT" | jq -r '.Credentials.AccessKeyId')
  AWS_SECRET_ACCESS_KEY=$(echo "$ASSUME_ROLE_RESULT" | jq -r '.Credentials.SecretAccessKey')
  AWS_SESSION_TOKEN=$(echo "$ASSUME_ROLE_RESULT" | jq -r '.Credentials.SessionToken')
  AWS_SESSION_EXPIRATION=$(echo "$ASSUME_ROLE_RESULT" | jq -r '.Credentials.Expiration' | awk -F':' -v OFS=':' '{ print $1, $2, $3$4 }')
  DALMATIAN_ASSUME_MAIN_ROLE_CREDENTIALS_JSON_STRING=$(
    jq -n \
    --arg aws_access_key_id "$AWS_ACCESS_KEY_ID" \
    --arg aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" \
    --arg aws_session_token "$AWS_SESSION_TOKEN" \
    --arg aws_session_expiration "$AWS_SESSION_EXPIRATION" \
    '{
      aws_access_key_id: $aws_access_key_id,
      aws_secret_access_key: $aws_secret_access_key,
      aws_session_token: $aws_session_token,
      aws_session_expiration: $aws_session_expiration
    }'
  )

  echo "$DALMATIAN_ASSUME_MAIN_ROLE_CREDENTIALS_JSON_STRING" > "$DALMATIAN_ASSUME_MAIN_ROLE_CREDENTIALS_FILE"
fi

# export assume role credentials
DALMATIAN_MFA_CREDENTIALS_JSON_STRING=$(cat "$DALMATIAN_ASSUME_MAIN_ROLE_CREDENTIALS_FILE")
AWS_ACCESS_KEY_ID=$(echo "$DALMATIAN_MFA_CREDENTIALS_JSON_STRING" | jq -r '.aws_access_key_id')
AWS_SECRET_ACCESS_KEY=$(echo "$DALMATIAN_MFA_CREDENTIALS_JSON_STRING" | jq -r '.aws_secret_access_key')
AWS_SESSION_TOKEN=$(echo "$DALMATIAN_MFA_CREDENTIALS_JSON_STRING" | jq -r '.aws_session_token')
export AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY
export AWS_SESSION_TOKEN

i=1
for a in "${COMMAND_ARGS[@]}"
do
  if [ "$a" == "-i" ]
  then
    INFRASTRUCTURE_NAME="${COMMAND_ARGS[$i]}"
  fi
  i=$(( i + 1 ))
done

# Assume Role for infrastructure if set
if [ -n "$INFRASTRUCTURE_NAME" ]
then
  # shellcheck source=bin/aws/assume-infrastructure-role
  . "$APP_ROOT/bin/aws/assume-infrastructure-role" -i "$INFRASTRUCTURE_NAME"
fi

# If no COMMAND was specified, and SUBCOMMAND isn't an executable script
if [[ -z "${COMMAND}" && ! -f "${SUBCOMMAND}" ]] || [[ ! -f "$APP_ROOT/bin/$SUBCOMMAND/$COMMAND" ]]; then
  err "Command not found: $(basename "${0}") ${SUBCOMMAND} ${COMMAND:=""}"

  echo
  echo "Usage:"

  while IFS=  read -r -d $'\0'; do
    echo "  $(basename "${0}") ${SUBCOMMAND} $(basename "${REPLY}")"
  done < <(find "${APP_ROOT}/bin/$SUBCOMMAND" -maxdepth 1 -type f -print0)

  exit 1
fi

# Run specified command with args
"$APP_ROOT/bin/$SUBCOMMAND/$COMMAND" "${COMMAND_ARGS[@]}"
