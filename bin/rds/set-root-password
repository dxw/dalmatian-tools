#!/bin/bash

# exit on failures
set -e
set -o pipefail

usage() {
  echo "Usage: dalmatian $(basename "$(dirname "${BASH_SOURCE[0]}")") $(basename "$0") [options...]" 1>&2
  echo "  -h                     - help"
  echo "  -i <infrastructure>    - infrastructure name"
  echo "  -r <rds_name>          - RDS name (as defined in the Dalmatian config)"
  echo "  -e <environment>       - environment name (e.g. 'staging' or 'prod')"
  echo "  -P <new_password>      - new password to set"
  exit 1
}

# if there are no arguments passed exit with usage
if [ $# -lt 1 ];
then
 usage
fi

while getopts "i:e:r:P:h" opt; do
  case $opt in
    i)
      INFRASTRUCTURE_NAME=$OPTARG
      ;;
    e)
      ENVIRONMENT=$OPTARG
      ;;
    r)
      RDS_NAME=$OPTARG
      ;;
    P)
      NEW_PASSWORD=$OPTARG
      ;;
    h)
      usage
      ;;
    *)
      usage
      ;;
  esac
done

if [[
  -z "$INFRASTRUCTURE_NAME"
  || -z "$RDS_NAME"
  || -z "$ENVIRONMENT"
  || -z "$NEW_PASSWORD"
]]; then
  usage
fi

# Remove dashes from the variables to create the RDS identifier, because dashes
# aren't allowed in RDS identifiers. Dalmatian removes them on deployment, so we
# need to remove them here to get the correct identifier.
RDS_IDENTIFIER="${INFRASTRUCTURE_NAME//-/}${RDS_NAME//-/}${ENVIRONMENT//-/}"

echo "==> Setting RDS root password in Parameter Store..."

aws ssm put-parameter \
   --name "/$INFRASTRUCTURE_NAME/$RDS_IDENTIFIER-rds/password" \
   --value "$NEW_PASSWORD" \
   --type SecureString \
   --key-id "alias/$INFRASTRUCTURE_NAME-$RDS_NAME-rds-$ENVIRONMENT-rds-values-ssm" \
   --overwrite

echo "==> Parameter store value set"
echo "==> For this change to take effect, run the following from dalmatian core to deploy:"
echo ""
echo "    ./scripts/bin/deploy -i $INFRASTRUCTURE_NAME -e $ENVIRONMENT -S hosted-zone,vpn-customer-gateway,ecs,ecs-services,elasticache-cluster,shared-loadbalancer,waf"
