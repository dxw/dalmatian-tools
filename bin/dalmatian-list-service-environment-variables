#!/bin/bash

# exit on failures
set -e
set -o pipefail

usage() {
  echo "Usage: $(basename "$0") [OPTIONS]" 1>&2
  echo "  -h                     - help"
  echo "  -i <infrastructure>    - infrastructure name"
  echo "  -s <service> - service name "
  echo "  -e <environment>       - environment name (e.g. 'staging' or 'prod')"
  echo "  -p <profile>           - AWS profile with MFA enabled (defaults to"
  echo "                           'dalmatian-admin')"
  exit 1
}

# if there are no arguments passed exit with usage
if [ $# -lt 1 ];
then
 usage
fi

SCRIPT_PATH="$( cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"

AWS_PROFILE=dalmatian-admin

while getopts "i:e:s:p:h" opt; do
  case $opt in
    i)
      INFRASTRUCTURE_NAME=$OPTARG
      ;;
    e)
      ENVIRONMENT=$OPTARG
      ;;
    s)
      SERVICE_NAME=$OPTARG
      ;;
    p)
      AWS_PROFILE=$OPTARG
      ;;
    h)
      usage
      ;;
    *)
      usage
      ;;
  esac
done

if [[
  -z "$INFRASTRUCTURE_NAME"
  || -z "$SERVICE_NAME"
  || -z "$ENVIRONMENT"
]]; then
  usage
fi


echo "==> Assuming role to provide access to $INFRASTRUCTURE_NAME infrastructure account ..."

ASSUME_ROLE_AWS_CREDENTIALS=$("$SCRIPT_PATH/dalmatian-assume-infrastructure-role" -i "$INFRASTRUCTURE_NAME" -p "$AWS_PROFILE")

eval "$ASSUME_ROLE_AWS_CREDENTIALS"

echo "==> Retrieving env vars for $INFRASTRUCTURE_NAME/$SERVICE_NAME/$ENVIRONMENT from Parameter Store..."


  aws ssm get-parameters-by-path \
    --path "/$INFRASTRUCTURE_NAME/$SERVICE_NAME/$ENVIRONMENT/" \
    --recursive \
    --with-decryption \
    | jq -r '.Parameters[] | "\(.Name)=\(.Value)"' \
    | sed -e "s#^/$INFRASTRUCTURE_NAME/$SERVICE_NAME/$ENVIRONMENT/##"
