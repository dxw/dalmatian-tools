#!/bin/bash

# Requires the `session-manager-plugin` to be installed:
# https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html

# exit on failures
set -e
set -o pipefail

usage() {
  echo "Usage: $(basename "$0") [OPTIONS]" 1>&2
  echo "  -h                     - help"
  echo "  -i <infrastructure>    - infrastructure name"
  echo "  -e <environment>       - environment name (e.g. 'staging' or 'prod')"
  echo "  -s <source>            - Source"
  echo "  -t <host_target>       - Host target"
  echo "  -r <recursive>         - Recursive"
  echo "  -I <ecs_insatnce_id>   - ECS instance ID (optional)"
  exit 1
}

# if there are no arguments passed exit with usage
if [ $# -eq 0 ]
then
 usage
fi

if ! command -v session-manager-plugin > /dev/null
then
  echo "This script requires the \`session-manager-plugin\` to be installed:"
  echo "https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html"
  echo "Also, If you are running an Mac M1 or above, you'll need to install Rosetta 2 by running:"
  echo "softwareupdate --install-rosetta"
  exit 1
fi

RECURSIVE=0

while getopts "i:e:s:t:I:rh" opt; do
  case $opt in
    i)
      INFRASTRUCTURE_NAME=$OPTARG
      ;;
    e)
      ENVIRONMENT=$OPTARG
      ;;
    s)
      SOURCE=$OPTARG
      ;;
    t)
      HOST_TARGET=$OPTARG
      ;;
    I)
      ECS_INSTANCE_ID=$OPTARG
      ;;
    r)
      RECURSIVE=1
      ;;
    h)
      usage
      ;;
    *)
      usage
      ;;
  esac
done

if [[
  -z "$INFRASTRUCTURE_NAME"
  || -z "$ENVIRONMENT"
  || -z "$SOURCE"
  || -z "$HOST_TARGET"
]]
then
  usage
fi

BUCKET_NAME="$INFRASTRUCTURE_NAME-ecs-$ENVIRONMENT-dalmatian-transfer"
PREFIX_DIR="$(date +%s)"

echo "==> Copying to $BUCKET_NAME S3 bucket ..."

if [ "$RECURSIVE" == 1 ];
then
  S3_RECURSIVE="--recursive"
  SSM_S3_RECURSIVE="$S3_RECURSIVE"
else
  S3_RECURSIVE=""
  # This needs to be set to something for the SSM document
  # This is the least disruptive parameter available ...
  SSM_S3_RECURSIVE="--ignore-glacier-warnings"
fi

# shellcheck disable=2086
aws s3 cp "$SOURCE" s3://"$BUCKET_NAME"/"$PREFIX_DIR"/"$(basename "$SOURCE")" $S3_RECURSIVE

ECS_INSTANCE_ID=${ECS_INSTANCE_ID:-$(pick_ecs_instance -i "$INFRASTRUCTURE_NAME" -e "$ENVIRONMENT")}

echo "==> Downloading from S3 to $ECS_INSTANCE_ID..."

echo "==> s3://$BUCKET_NAME/$PREFIX_DIR/$(basename "$SOURCE") -> $HOST_TARGET"

aws ssm start-session \
  --target "$ECS_INSTANCE_ID" \
  --document-name "$INFRASTRUCTURE_NAME-$ENVIRONMENT-s3-download" \
  --parameters "Source=s3://$BUCKET_NAME/$PREFIX_DIR/$(basename "$SOURCE"),HostTarget=$HOST_TARGET,Recursive=$SSM_S3_RECURSIVE"

echo "==> Removing from S3 bucket ..."

# shellcheck disable=2086
aws s3 rm s3://"$BUCKET_NAME"/"$PREFIX_DIR"/"$(basename "$SOURCE")" $S3_RECURSIVE

echo "Success!"
