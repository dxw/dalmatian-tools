#!/bin/bash

# Requires the `session-manager-plugin` to be installed:
# https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html

# exit on failures
set -e
set -o pipefail

usage() {
  echo "Usage: $(basename "$0") [OPTIONS]" 1>&2
  echo "  -h                     - help"
  echo "  -i <infrastructure>    - infrastructure name"
  echo "  -s <service_name>      - service name"
  echo "  -e <environment>       - environment name (e.g. 'staging' or 'prod')"
  echo "  -p <profile>           - AWS profile with MFA enabled (defaults to"
  echo "                           'AWS_PROFILE' env or 'dalmatian-admin')"
  exit 1
}

# if there are no arguments passed exit with usage
if [ $# -eq 0 ]
then
 usage
 exit 0
fi

while getopts "i:e:s:p:h" opt; do
  case $opt in
    i)
      INFRASTRUCTURE_NAME=$OPTARG
      ;;
    e)
      ENVIRONMENT=$OPTARG
      ;;
    s)
      SERVICE_NAME=$OPTARG
      ;;
    p)
      # shellcheck disable=SC2034
      AWS_PROFILE=$OPTARG
      ;;
    h)
      usage
      exit;;
    *)
      usage
      exit;;
  esac
done

if [[
  -z "$INFRASTRUCTURE_NAME"
  || -z "$ENVIRONMENT"
  || -z "$SERVICE_NAME"
]]
then
  usage
fi

echo "==> Finding Docker image..."

IMAGE_URL=$(aws ecr describe-repositories --repository-name "$INFRASTRUCTURE_NAME-$SERVICE_NAME-$ENVIRONMENT" | jq -r '.repositories[0].repositoryUri')
ECR_ENDPOINT=$(echo "$IMAGE_URL" | cut -d '/' -f1)

echo "==> Logging into AWS ECR..."

aws ecr get-login-password | docker login --username AWS --password-stdin "$ECR_ENDPOINT" | sed 's/^/  /'

echo "==> Pulling image $IMAGE_URL"

docker pull "$IMAGE_URL" | sed 's/^/  /'
