#!/bin/bash

# exit on failures
set -e
set -o pipefail

usage() {
  echo "Usage: $(basename "$0") [OPTIONS]" 1>&2
  echo "  -h                     - help"
  echo "  -i <aws_account_id>    - AWS Account ID"
  echo "  -r <deefault_region>   - AWS Default region"
  echo "  -n <account_name>      - A lower case hyphenated friendly name"
  echo "  -e <external>          - Configure as an 'External' AWS Account (An account not part of the SSO Org)"
  exit 1
}

# if there are no arguments passed exit with usage
if [ $# -eq 0 ]
then
 usage
fi

ACCOUNT_EXTERNAL=0
while getopts "i:r:n:eh" opt; do
  case $opt in
    i)
      AWS_ACCOUNT_ID=$OPTARG
      ;;
    r)
      AWS_ACCOUNT_DEFAULT_REGION=$OPTARG
      ;;
    n)
      ACCOUNT_NAME=$OPTARG
      ;;
    e)
      ACCOUNT_EXTERNAL=1
      ;;
    h)
      usage
      ;;
    *)
      usage
      ;;
  esac
done

if [[
  -z "$AWS_ACCOUNT_ID"
  || -z "$ACCOUNT_NAME"
  || -z "$AWS_ACCOUNT_DEFAULT_REGION"
]]
then
  usage
fi

MAIN_DALMATIAN_ACCOUNT_ID="$(jq -r '.main_dalmatian_account_id' < "$CONFIG_SETUP_JSON_FILE")"
DALMATIAN_ACCOUNT_ADMIN_ROLE_NAME="$(jq -r '.aws_sso.default_admin_role_name' < "$CONFIG_SETUP_JSON_FILE")"

if [ "$ACCOUNT_EXTERNAL" == 1 ]
then
  AWS_ACCOUNT_ID="E$AWS_ACCOUNT_ID"
  EXTERNAL_ROLE_TRUST_RELATIONSHIP=$(
    jq -n \
    --arg aws_principal_arn "arn:aws:iam::$MAIN_DALMATIAN_ACCOUNT_ID:root" \
    --arg sso_aws_principal_arn "arn:aws:iam::$MAIN_DALMATIAN_ACCOUNT_ID:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_${DALMATIAN_ACCOUNT_ADMIN_ROLE_NAME}_*" \
    --arg sso_aws_principal_arn_wild_region "arn:aws:iam::$MAIN_DALMATIAN_ACCOUNT_ID:role/aws-reserved/sso.amazonaws.com/*/AWSReservedSSO_${DALMATIAN_ACCOUNT_ADMIN_ROLE_NAME}_*" \
    '{
      Version: "2012-10-17",
      Statement: [
        {
          Effect: "Allow",
          Principal: {
            AWS: $aws_principal_arn
          },
          Action: "sts:AssumeRole",
          Condition: {
            ArnLike: {
              "aws:PrincipalArn": [
                $sso_aws_principal_arn,
                $sso_aws_principal_arn_wild_region
              ]
            }
          }
        }
      ]
    }'
  )
  log_info -l "External accounts require a Role to be added that can be assumed by the AWS Federated user account from the Main Dalmatian account" -q "$QUIET_MODE"
  log_info -l "1. In the External Account (${AWS_ACCOUNT_ID:1}), create a Role named '$MAIN_DALMATIAN_ACCOUNT_ID-dalmatian-access', which has Administrator permissions" -q "$QUIET_MODE"
  log_info -l "2. Add the following Trust Relationship policy to the role:" -q "$QUIET_MODE"
  echo "$EXTERNAL_ROLE_TRUST_RELATIONSHIP"
  if ! yes_no "Enter 'y' to continue:" "y"
  then
    exit 0
  fi
fi

NEW_WORKSPACE_NAME="$AWS_ACCOUNT_ID-$AWS_ACCOUNT_DEFAULT_REGION-$ACCOUNT_NAME"
log_info -l "Creating $NEW_WORKSPACE_NAME workspace ..." -q "$QUIET_MODE"

WORKSPACE_EXISTS=0
while IFS='' read -r workspace
do
  workspace=${workspace/\*/ }
  workspace=$(echo "$workspace" | xargs)
  if [ "$NEW_WORKSPACE_NAME" == "$workspace" ]
  then
    WORKSPACE_EXISTS=1
  fi
done < <("$APP_ROOT/bin/dalmatian" terraform-dependencies run-terraform-command -c "workspace list" -a -q)

if [ "$WORKSPACE_EXISTS" == "1" ]
then
  log_info -l "$NEW_WORKSPACE_NAME workspace exists" -q "$QUIET_MODE"
  "$APP_ROOT/bin/dalmatian" terraform-dependencies run-terraform-command -c "workspace select $NEW_WORKSPACE_NAME" -a -q
else
  "$APP_ROOT/bin/dalmatian" terraform-dependencies run-terraform-command -c "workspace new $NEW_WORKSPACE_NAME" -a -q
fi

"$APP_ROOT/bin/dalmatian" aws generate-config

"$APP_ROOT/bin/dalmatian" terraform-dependencies get-tfvars

if [ "$ACCOUNT_NAME" != "dalmatian-main" ]
then
  log_info -l "Running account bootstrap on the main Dalmatian account to upload tfvars ..." -q "$QUIET_MODE"
  DEFAULT_REGION="$(jq -r '.default_region' < "$CONFIG_SETUP_JSON_FILE")"
  "$APP_ROOT/bin/dalmatian" deploy account-bootstrap -a "$MAIN_DALMATIAN_ACCOUNT_ID-$DEFAULT_REGION-dalmatian-main" -N
fi

log_info -l "Running account bootstrap on $NEW_WORKSPACE_NAME" -q "$QUIET_MODE"
"$APP_ROOT/bin/dalmatian" deploy account-bootstrap -a "$NEW_WORKSPACE_NAME"
