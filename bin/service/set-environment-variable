#!/bin/bash

# exit on failures
set -e
set -o pipefail

usage() {
  echo "Usage: $(basename "$0") [OPTIONS]" 1>&2
  echo "This command can set environment variables for a service"
  echo "  -h                     - help"
  echo "  -i <infrastructure>    - infrastructure name"
  echo "  -s <service>           - service name "
  echo "  -e <environment>       - environment name (e.g. 'staging' or 'prod')"
  echo "  -k <key>               - key e.g SMTP_HOST"
  echo "  -v <value>             - value e.g smtp.example.org"
  echo "  -E <environment_file>  - environment file path"
  exit 1
}

set_envar() {
  INFRASTRUCTURE_NAME="$1"
  SERVICE_NAME="$2"
  ENVIRONMENT="$3"
  KEY="$4"
  VALUE="$5"

  echo "==> setting environment variable $4 for $1/$2/$3"

  aws ssm put-parameter \
    --name "/$1/$2/$3/$4" \
    --value "$5" \
    --type SecureString \
    --key-id "alias/$1-$2-$3-ssm" \
    --overwrite
}

# if there are no arguments passed exit with usage
if [ $# -lt 1 ]
then
 usage
fi

ENV_FILE=""

while getopts "i:e:s:k:v:E:h" opt; do
  case $opt in
    i)
      INFRASTRUCTURE_NAME=$OPTARG
      ;;
    e)
      ENVIRONMENT=$OPTARG
      ;;
    s)
      SERVICE_NAME=$OPTARG
      ;;
    k)
      KEY=$OPTARG
      ;;
    v)
      VALUE=$OPTARG
      ;;
    E)
      ENV_FILE=$OPTARG
      ;;
    h)
      usage
      ;;
    *)
      usage
      ;;
  esac
done

if [[
  -z "$INFRASTRUCTURE_NAME"
  || -z "$SERVICE_NAME"
  || -z "$ENVIRONMENT"
]]
then
  usage
fi

if [[
  -z "$ENV_FILE"
  && ( -z "$KEY" || -z "$VALUE" )
]]
then
  usage
fi

if [[ -n "$ENV_FILE" ]]
then
  if [ ! -f "$ENV_FILE" ]
  then
    echo "Error: $ENV_FILE does not exist"
    exit 1
  fi

  while IFS='' read -r envar
  do
    KEY=$(echo "$envar" | cut -d'=' -f1)
    VALUE=$(echo "$envar" | cut -d'=' -f2-)
    set_envar "$INFRASTRUCTURE_NAME" "$SERVICE_NAME" "$ENVIRONMENT" "$KEY" "$VALUE"
  done < <(sed -e "s/'//" -e "s/'$//" -e 's/"//' -e 's/"$//' "$ENV_FILE")
else
  set_envar "$INFRASTRUCTURE_NAME" "$SERVICE_NAME" "$ENVIRONMENT" "$KEY" "$VALUE"
fi
